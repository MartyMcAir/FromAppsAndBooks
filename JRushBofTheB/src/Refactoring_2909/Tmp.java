package Refactoring_2909;

// Рефакторинг (15)
//Отлично. Ты освоил основные методы рефакторинга: Подъем поля, Подъем метода, Инкапсуляция коллекции,
// Извлечение подкласса, Подъем тела конструктора, Спуск метода, Спуск поля, Извлечение интерфейса,
// Свертывание иерархии, Замена наследования делегированием, Извлечение суперкласса, Замена простого поля объектом,
// Создание шаблонного метода, Замена делегирования наследованием, Переименование метода,
// Замена параметра набором специализированных методов, Добавление параметра, Удаление параметра,
// Разделение запроса и модификатора, Параметризация метода, Передача всего объекта, Замена параметра вызовом метода,
// Замена параметров объектом, Удаление сеттера, Сокрытие метода, Замена исключения проверкой условия,
// Удаление управляющего флага, Самоинкапсуляция поля, Замена поля-массива объектом, Инкапсуляция поля,
// Замена кодирования типа классом, Замена конструктора фабричным методом, Замена кода ошибки исключением,
// Разбиение условного оператора, Объединение условных операторов,
// Объединение дублирующихся фрагментов в условных операторах, Замена магического числа символьной константой,
// Замена условного оператора полиморфизмом, Извлечение метода, Встраивание метода, Перемещение метода,
// Расщепление переменной, Удаление присваиваний параметрам, Перемещение поля, Извлечение класса,
// Встраивание класса и Сокрытие делегирования.
//
//Конечно есть еще и другие, обязательно ознакомься и с ними. Очень важно не только уметь применять методы рефакторинга,
// но и видеть места, где их нужно применить.
//По мере возрастания опыта, такие места будет все проще и проще находить.
//Мартин Фаулер в своей книге "Рефакторинг: Улучшение существующего кода" называет такие места "код с душком".
// Обязательно прочитай про основные варианты "кода с душком". Желаю, чтобы твой код пах хорошо!

// https://javarush.ru/quests/lectures/questmultithreading.level05.lecture16
// сам решил почти все
public class Tmp {
}
