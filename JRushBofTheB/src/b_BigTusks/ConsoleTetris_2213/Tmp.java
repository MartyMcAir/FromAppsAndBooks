package b_BigTusks.ConsoleTetris_2213;

public class Tmp {
    // Тетрис(4)                 // *Учись сразу делать правильно!
    // Тут и в будущем, если нет явных указаний с каким модификатором доступа создавать метод,
    //      то он должен быть публичным, а поле приватным.
    // *В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
    // *Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
    // *Но также нет никаких причин указывать уровень доступа public для методов,
    //      которые будут использованы только в рамках пакета.
    // *Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.

    // Тетрис(6) _!!!_ опять с этой матрицей застопорился что есть x, а что y..!?
    // Теперь перейдем к классу Field.
    // Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
    // Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
    // Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
    // чейка с координатами x, y - это matrix[y][x]. _ //матрица поля: 1 - клетка занята, 0 - свободна

    // Тетрис(7)              //Нам понадобится еще 4 метода в классе Field:
    //а) print() - объект будет отрисовывать на экран свое текущее состояние;
    //б) removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
    //в) Integer getValue(int x, int y) - возвращает значение которое находится в матрице с координатами x и y;
    //г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.

    // Тетрис(8)      __ матрица успешно прошла_ wOW        // Figure. Этот класс будет описывать падающую фигурку.
    //Нам понадобятся ее координаты и форма.
    //За координаты будут отвечать две переменные x и y.
    //За форму - матрица. Двумерный массив 3×3, состоящий из единиц и нулей. // matrix(матрица) типа int[][].
    //Единицей мы обозначаем что клетка есть, нулем - что она пустая.      // поля: x типа int, y типа int.

    // Тетрис(9)        //Если ты обратил внимание, мы пишем программу "сверху вниз".
    //Сначала решили, какие классы нам нужны. Затем - какие методы.      //А потом уже начнем писать код этих методов.
    // Таким образом мы разбиваем большую задачу на множество маленьких.
    //Когда код всех методов будет готов, останется только проверить - так ли все работает, как должно быть.
    //И если надо - внести некоторые изменения.

    // Тетрис(10)    //методы:
    //left() - для движения фигурки влево.
    //right() - для движения фигурки вправо.
    //down() - для движения фигурки вниз.
    //up() - для движения фигурки вверх.
    //rotate() - для поворота фигурки вокруг главной диагонали.
    //downMaximum() - падение фигурки в низ до дна.
    //boolean isCurrentPositionAvailable() - проверка - может ли фигурка быть помещена в текущую позицию.
    //          Для теста захардкодь результат в true, пока мы не реализовали логику.
    //landed() - вызывается, когда фигурка достигла дна или уперлась в другую фигурку

    // Тетрис(11)                      // Теперь создай класс FigureFactory.
    //С его помощью мы будем создавать фигуры различных форм.

    // Тетрис(13) _!!!_             // print в классе Field
    // сам разобрался просто 2 for{..for{.. }  } выводят массив _ а потом его переписали в монстра..
    //          .. теперь там целая куча логики которую не понять без последовательного перебора что есть что выводит..
    //а) Метод должен выводить на экран прямоугольник состоящий из символов '.' и 'X'.
    //б) Высота прямоугольника равна height, ширина - width
    //в) Если данная клетка пустая - вывести точку, если не пустая - английский X
    // 3. Метод print должен выводить на экран количество строк равное height. __ (т.е. 3строки по 3символа)
    // 4. Количество символов в каждой строке выведенной на экран должно быть равно width.

    // Тетрис(14)    _!!!_     //Напиши реализацию метода removeFullLines в классе Field.
    //а) удалить все строки из матрицы, которые полностью заполнены (состоят из одних единиц);
    //б) сместить оставшиеся строки вниз;
    //в) создать новые строки взамен отсутствующих.
    //matrix[y][x] содержит элемент с координатами (x,y).
    //matrix[i] содержит i-ю строку.
    //Мы можем:  //а) удалить стоку:   //matrix[i] = null
    //б) скопировать [ссылку на] строку:   //matrix[i+1] = matrix[i];
    //в) создать новую строку:    //matrix[i] = new int[width];

    // Тетрис(15) _!!!_ копипаст _ т.к. не доконца понял этой абстрактной логики //Нап реализ метода step в классе Tetris.

    // Тетрис(16)
    // Напиши свою реализацию методов left(), right(), up(), down() в классе Figure.

}