package com.javarush.task.task28.task2810;

public class Tmp {
    // Aggregator (1)   -----------------------------------------------------------------------------------------
    // С чего же нужно начать реализацию? Конечно же с метода main : )
    //1. Создай класс Aggregator с методом main.
    //2. Создай пакет model, в нем создай класс Provider.
    //Этот класс будет обобщать способ получения данных о вакансиях.
    //3. Т.к. для каждого сайта будет выполняться одинаковый сценарий, то будет паттерн Стратегия.
    // Почитай про него в инете на вики.
    //В пакете model создай интерфейс Strategy. Он будет отвечать за получение данных с сайта.
    //4. В класс Provider добавь поле Strategy strategy. Добавь конструктор с этим полем и сеттер.

    // Aggregator (2)   -----------------------------------------------------------------------------------------
    //1. Создай класс Controller, в нем будет содержаться бизнес логика.
    //2. В Controller добавь паблик конструктор, который будет принимать столько провайдеров,
    // сколько в него передадут для обработки. Сохрани их в приватное поле providers.
    //Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter,
    // выбрать Create Field for Parameter 'providers'.
    //3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.
    //4. Создай метод toString в классе Controller (Alt+Insert -> toString())
    // со стандартной реализацией (должен выводить поле providers).

    // Aggregator (3)   -----------------------------------------------------------------------------------------
    //Начиная с этого задании ты начнешь писать логику получения данных с сайта.
    //Эта логика будет полностью сосредоточена в классах, реализующих Strategy.
    //Провайдер в данном случае выступает в качестве контекста, если мы говорим о паттерне Стратегия.
    //В провайдере должен быть метод, который будет вызывать метод стратегии для выполнения главной операции.
    //Этот метод будет возвращать все java вакансии с выбранного сайта (ресурса).
    //
    //1. В корне задачи создай пакет vo (value object), в котором создай класс Vacancy.
    //Этот класс будет хранить данные о вакансии.
    //2. В Provider создай метод List<Vacancy> getJavaVacancies(String searchString). Оставь пока метод пустым.
    //3. Что есть у вакансии?
    //Название, зарплата, город, название компании, название сайта, на котором вакансия найдена, ссылка на вакансию.
    // В классе Vacancy создай соответствующие строковые поля: title, salary, city, companyName, siteName, url.
    //4. Создай геттеры и сеттеры для всех полей класса Vacancy.
    //5. В пакете model создай класс HHStrategy от Strategy.
    //Этот класс будет реализовывать конкретную стратегию работы с сайтом ХэдХантер (http://hh.ua/ и http://hh.ru/).


    // Aggregator (4)   -----------------------------------------------------------------------------------------
    //Открой сайт ХэдХантер - http://hh.ua/ или http://hh.ru/
    //В строке поиска набери "java Киев", снизу перейди на вторую страницу,
    // т.к. урлы часто отличаются на первой странице и далее.
    //У меня получилась такая ссылка: //http://hh.ua/search/vacancy?text=java+Киев&page=1

    // My: https://tuapse.hh.ru/search/vacancy?area=1460&st=searchVacancy&text=java+Киев or java&page=1
    // ___ Из этого следует, что:
    //1) если тебе нужно будет фильтровать по городу, то ты добавишь его после слова java, разделив их знаком "+",
    //2) нумерация страниц начинается с 0.
    //Итак, ссылка будет примерно такой: //http://hh.ua/search/vacancy?text=java+ADDITIONAL_VALUE&page=PAGE_VALUE
    //1.Из получ ссылки в HHStrategy созд приватную строк константу URL_FORMAT, котор будет передав в String.format.
    //String.format(URL_FORMAT, "Kiev", 3) должно равняться
    //"http://hh.ua/search/vacancy?text=java+Kiev&page=3" или //"http://hh.ru/search/vacancy?text=java+Kiev&page=3"

    //Для этого скопируйте ссылку в код и нажмите на ней нужную комбинацию клавиш.
    //Ctrl+Alt+C(Constant) - создание констант,
    //Ctrl+Alt+M(Method) - создание методов,
    //Ctrl+Alt+V(Variable) - создание переменных.

    //2. Тебе нужно программно получить исходный код страницы. Это HTTP запрос. Тебе понадобится Java HTML Parser.
    //Хороший парсер jsoup, будешь использовать его.
    //Найди сайт jsoup - Java HTML Parser, скачай с него либу версии и 1.9.2 и ее сорцы(sources).
    // Класть их внутрь проекта не нужно!
    //3. Подключи новые либы:
    //В IDEA открой Project Structure (в меню File).
    // Слева выбери Project Settings -> Libraries, в окошке справа сверху нажми "+".
    //Выбери "Java",если либы еще не нет,либо "Attach Files or Directories",чтоб добавить джарники к существующ либе.
    //В диалоговом окне открой путь к папке из п.2, открой саму папку и выбери все либы - *.jar файлы.
    //4. Прочитай дополнительный материал к лекции в Сообществе.

    // Aggregator (5)   -----------------------------------------------------------------------------------------
    // _ странно но сам не догадался _ к такому простому..
    //1. Добавь в интерфейс метод getVacancies(String searchString), который будет возвращать список вакансий.
    //2. Поправь ошибки в классе HHStrategy.
    //3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.
    //4. Давай попробуем запустить и посмотреть, как работает наша программа.
    //В методе main вместо вывода на экран напиши controller.scan(); Воспользуйся подсказкой IDEA и создай метод.
    //Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список.
    // Выведи количество вакансий в консоль.
    //5. Исправь NPE, если появляется это исключение (поставь заглушку).

    // Aggregator (6)   -----------------------------------------------------------------------------------------
    //1. Слева в панеле Project найди снизу External Libraries.В jsoup найди пакет examples,посмотри классы в эт пакете.
    //2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу ХэдХантера методом GET.
    //Это нужно сделать в методе getVacancies класса HHStrategy.
    //Подсказка: получится объект класса Document.
    //3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
    //4. Создай файл с расширением html где-то в корне проекта.
    //Вставь содержимое буфера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
    //Ура! Это код страницы HTML :)
    //5. Реализуй в вакансии (Vacancy) методы equals/hashCode.
    //Alt+Enter - equals() and hashCode().


    // Aggregator (6) _ ---------------------- _ // https://jsoup.org/cookbook/extracting-data/example-list-links
    // 63 файла - исходников _ а пример оказывается в вон той ссылке выше
    //1. Слева в панеле Project найди снизу External Libraries. В jsoup найди пакет examples, посмотри классы в этом пакете.
    //2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу ХэдХантера методом GET.
    //Это нужно сделать в методе getVacancies класса HHStrategy. Подсказка: получится объект класса Document.

    // сам бы, жто такого не дешел
    // https://github.com/foreigner20/SomeJavaRushHomework/blob/9cf80e2a0ec055393961c2eaf1984ecea05c4a39/4.JavaCollections/src/com/javarush/task/task28/task2810/model/HHStrategy.java

    // начиная вот отсюдавообще не дошло..
    //3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
    // Скопируй полученное значение document.html() в буфер.
    //4. Создай файл с расширением html где-то в корне проекта.
    //Вставь содержимое буфера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
    //Ура! Это код страницы HTML :)
    //5. Реализуй в вакансии (Vacancy) методы equals/hashCode.    //Alt+Enter - equals() and hashCode().

    // кто сидит через прокси, тому надо устанавливать параметры прокси
    //System.setProperty("http.proxyHost","192.168.1.1");
    //        System.setProperty("http.proxyPort", "8080");
    //        System.setProperty("https.proxyHost", "192.168.1.1");
    //        System.setProperty("https.proxyPort", "8080");

    // Если кто сидит через прокси, то надо добавить для скачивания, а для валидатора убрать
    //
    //Document doc = Jsoup
    //        .connect( String xxxx )
    //        .proxy("proxy adres", port)
    //        .get();

    // Aggregator (12) _ ----------------------------------------------------------------------- _
    //Чтобы запустить приложение, нужно эмулировать событие пользователя:
    //1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod().
    //Пусть этот метод пробросит вызов в контроллер для города "Odessa".
    //2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.
    //Это будет флаг, что можно двигаться дальше.
    //3. Для запуска нужно еще обновить метод main в Aggregator.
    //3.1. Создай вью, модель, контроллер.
    //3.2. Засэть во вью контроллер.
    //3.3. Вызови у вью метод userCitySelectEmulationMethod.
    //4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.
    //Работает? Отлично, что работает!

    // Aggregator (13) _ ----------------------------------------------------------------------- _
    // https://javarush.ru/tasks/com.javarush.task.task28.task2810.big13#discussion
    //Смотри, в пакете view появились два новых файла: _ vacancies.html - будешь в него записывать данные,
    //backup.html - дубликат vacancies.html для восстановления, вдруг данные в vacancies.html сотрутся.
    //Стань слева в дереве проекта на vacancies.html, нажми правой клавишей мыши, далее "Open in Browser".
    //Так будешь смотреть результат своего парсинга.

    //Пора заняться отображением вакансий.
    //1. В методе update класса HtmlView реализуй следующую логику:
    //1.1. сформируй новое тело файла vacancies.html, которое будет содержать вакансии,
    //1.2. запиши в файл vacancies.html его обновленное тело,
    //1.3. Все исключения должны обрабатываться в этом методе - выведи стек-трейс, если возникнет исключение.
    //2. Для реализации п.1 создай два пустых private метода:
    //String getUpdatedFileContent(List<Vacancy>), void updateFile(String),
    //Реализовывать их логику будем в следующих заданиях.
    //3. Чтобы добраться до файла vacancies.html, сформируй относительный путь к нему.
    //В классе HtmlView создай приватное строковое final поле filePath, присвой ему относительный путь к vacancies.html.
    //Путь должен быть относительно корня проекта.
    //Формируй путь динамически используя this.getClass().getPackage() и разделитель "/".
    //Подсказка: путь должен начинаться с "./".

    // Aggregator (14)
    // Теперь - как дебажить.
    //Поставь breakpoint, запусти в дебаг моде.
    //нажми Alt+F8 (Run -> Evaluate Expression).
    //В выражении (верхняя строка) напиши System.out.println("AAA") и нажми Alt+V (снизу кнопка Evaluate).
    //Перейди в окно консоли, там вывелось "AAA".

    //Используя это окно ты можешь смотреть текущие данные, заменять их на другие, нужные тебе.
    //Можешь выполнять все, что хочешь. Например, удалить все элементы мапы, изменить значение любой переменной, присвоить новое значение либо обнулить ее.
    //Поставь брекпоинт в Controller.onCitySelect, запусти в дебаг моде.
    //Остановились на этом брекпоинте? Отлично, жми Alt+F8, сверху в строке cityName = "junior";
    //далее жми Alt+V и F9, чтобы продолжить работу приложения.
    //Список вакансий, который пришел в HtmlView.update, выполнялся для запроса "java junior".
    //Используй окно Expression Evaluation, думаю, оно тебе понадобится в следующем пункте.

    // Aggregator (15) ___ копи паста
    // https://javarush.ru/tasks/com.javarush.task.task28.task2810.big15#discussion
    //В классе HtmlView остался один пустой метод getUpdatedFileContent. В этом задании я опишу, что он должен делать.
    //1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
    //распарси файл vacancies.html используя Jsoup. Кодировка файла "UTF-8", используй поле filePath.
    //2. Получи элемент, у которого есть класс template.
    //Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
    //Используй этот элемент в качестве шаблона для добавления новой строки в таблицу вакансий.
    //3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
    //В файле backup.html это одна вакансия - Junior Java Developer.
    //Нужно удалить все теги tr, у которых class="vacancy".
    //Но тег tr, у которого class="vacancy template", не удаляй.
    //Используй метод remove.
    //4. В цикле для каждой вакансии:
    //4.1. склонируй шаблон тега, полученного в п.2. Метод clone.
    //4.2. получи элемент, у которого есть класс "city". Запиши в него название города из вакансии.
    //4.3. получи элемент, у которого есть класс "companyName". Запиши в него название компании из вакансии.
    //4.4. получи элемент, у которого есть класс "salary". Запиши в него зарплату из вакансии.
    //4.5. получи элемент-ссылку с тегом a. Запиши в него название вакансии(title). Установи реальную ссылку на вакансию вместо href="url".
    //4.6. добавь outerHtml элемента, в который ты записывал данные вакансии,
    //непосредственно перед шаблоном <tr class="vacancy template" style="display: none">
    //5. Верни html код всего документа в качестве результата работы метода.
    //6. В случае возникновения исключения, выведи его стек-трейс и верни строку "Some exception occurred".
    //7. Запусти приложение, убедись, что все вакансии пишутся в файл vacancies.html.


}